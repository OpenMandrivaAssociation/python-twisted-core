diff -p -up TwistedCore-8.2.0/twisted/internet/_sslverify.py.orig TwistedCore-8.2.0/twisted/internet/_sslverify.py
--- TwistedCore-8.2.0/twisted/internet/_sslverify.py.orig	2009-08-11 20:14:34.000000000 -0300
+++ TwistedCore-8.2.0/twisted/internet/_sslverify.py	2009-08-11 20:14:46.000000000 -0300
@@ -2,7 +2,7 @@
 # Copyright 2005 Divmod, Inc.  See LICENSE file for details
 # Copyright (c) 2005-2008 Twisted Matrix Laboratories.
 
-import itertools, md5
+import itertools, hashlib
 from OpenSSL import SSL, crypto
 
 from twisted.python import reflect, util
@@ -452,7 +452,7 @@ class PublicKey:
         MD5 hex digest of signature on an empty certificate request with this
         key.
         """
-        return md5.md5(self._emptyReq).hexdigest()
+        return hashlib.md5(self._emptyReq).hexdigest()
 
 
     def inspect(self):
@@ -736,7 +736,7 @@ class OpenSSLCertificateOptions(object):
             ctx.set_options(self._OP_ALL)
 
         if self.enableSessions:
-            sessionName = md5.md5("%s-%d" % (reflect.qual(self.__class__), _sessionCounter())).hexdigest()
+            sessionName = hashlib.md5("%s-%d" % (reflect.qual(self.__class__), _sessionCounter())).hexdigest()
             ctx.set_session_id(sessionName)
 
         if not self.enableSessionTickets:
diff -p -up TwistedCore-8.2.0/twisted/persisted/sob.py.orig TwistedCore-8.2.0/twisted/persisted/sob.py
--- TwistedCore-8.2.0/twisted/persisted/sob.py.orig	2009-08-11 20:16:20.000000000 -0300
+++ TwistedCore-8.2.0/twisted/persisted/sob.py	2009-08-11 20:16:31.000000000 -0300
@@ -9,7 +9,7 @@ Save and load Small OBjects to and from 
 Maintainer: Moshe Zadka
 """
 
-import os, md5, sys
+import os, hashlib, sys
 try:
     import cPickle as pickle
 except ImportError:
@@ -31,11 +31,11 @@ def _encrypt(passphrase, data):
     leftover = len(data) % cipher.block_size
     if leftover:
         data += ' '*(cipher.block_size - leftover)
-    return cipher.new(md5.new(passphrase).digest()[:16]).encrypt(data)
+    return cipher.new(hashlib.md5(passphrase).digest()[:16]).encrypt(data)
 
 def _decrypt(passphrase, data):
     from Crypto.Cipher import AES
-    return AES.new(md5.new(passphrase).digest()[:16]).decrypt(data)
+    return AES.new(hashlib.md5(passphrase).digest()[:16]).decrypt(data)
 
 
 class IPersistable(Interface):
diff -p -up TwistedCore-8.2.0/twisted/python/filepath.py.orig TwistedCore-8.2.0/twisted/python/filepath.py
--- TwistedCore-8.2.0/twisted/python/filepath.py.orig	2009-08-11 20:16:46.000000000 -0300
+++ TwistedCore-8.2.0/twisted/python/filepath.py	2009-08-11 20:16:55.000000000 -0300
@@ -9,7 +9,7 @@ Object-oriented filesystem path represen
 import os
 import errno
 import random
-import sha
+import hashlib
 import base64
 
 from os.path import isabs, exists, normpath, abspath, splitext
@@ -120,7 +120,7 @@ def _secureEnoughString():
     """
     Create a pseudorandom, 16-character string for use in secure filenames.
     """
-    return armor(sha.new(randomBytes(64)).digest())[:16]
+    return armor(hashlib.sha1(randomBytes(64)).digest())[:16]
 
 
 
diff -p -up TwistedCore-8.2.0/twisted/spread/pb.py.orig TwistedCore-8.2.0/twisted/spread/pb.py
--- TwistedCore-8.2.0/twisted/spread/pb.py.orig	2009-08-11 20:17:05.000000000 -0300
+++ TwistedCore-8.2.0/twisted/spread/pb.py	2009-08-11 20:17:18.000000000 -0300
@@ -27,7 +27,7 @@ To get started, begin with L{PBClientFac
 @author: Glyph Lefkowitz
 """
 
-import md5
+import hashlib
 import random
 import new
 import types
@@ -997,10 +997,10 @@ def respond(challenge, password):
 
     This is useful for challenge/response authentication.
     """
-    m = md5.new()
+    m = hashlib.md5()
     m.update(password)
     hashedPassword = m.digest()
-    m = md5.new()
+    m = hashlib.md5()
     m.update(hashedPassword)
     m.update(challenge)
     doubleHashedPassword = m.digest()
@@ -1011,7 +1011,7 @@ def challenge():
     crap = ''
     for x in range(random.randrange(15,25)):
         crap = crap + chr(random.randint(65,90))
-    crap = md5.new(crap).digest()
+    crap = hashlib.md5(crap).digest()
     return crap
 
 
@@ -1340,12 +1340,12 @@ class _PortalAuthChallenger(Referenceabl
 
     # IUsernameHashedPassword:
     def checkPassword(self, password):
-        return self.checkMD5Password(md5.md5(password).digest())
+        return self.checkMD5Password(hashlib.md5(password).digest())
 
 
     # IUsernameMD5Password
     def checkMD5Password(self, md5Password):
-        md = md5.new()
+        md = hashlib.md5()
         md.update(md5Password)
         md.update(self.challenge)
         correct = md.digest()
